# コードが動かない問題は大きく2つ

1. エラーを読むことで解決できる問題
2. 原因の探索が必要な問題
- define：を定義する。定義する。
- function：関数。
- iterable：繰り返すことができるもの。
- Function statement：関数文。
- require：必要とする。
- a function name：関数名。

### エラーメッセージの中には「主語」が省略されることがある

例）Cannot read properties of null

= nullのプロパティを読み取ることができません。

### 主語がプログラム自体やシステムを指している場合「主語が省略」される

- ‘in’ operator：in 演算子
    - operatorは電話交換手、操作者以外に演算子という意味もある。

### 「主語」も「述語」も含まないエラーメッセージもある。

例）Invalid array length

- Invalid：不正な。無効の。
- array：配列。
- length：長さ。

### 多くの場合、長いエラー文の中で注意して読むべき箇所はわずか2、3行

※**エラーは、3つの要素から成り立っている。そしてその3つの要素の役割を理解しておけば、読むべき箇所が特定できるようになる。**

- 3つの要素
    1. エラーの種類
    2. エラーメッセージ
    3. スタックトレース

### エラーは全部読む必要はない

- ライブラリ：便利な機能をまとめたコードのこと。
- format（フォーマット）：データやその記録媒体に設定される一定の形式。

**※エラーは、プログラマーが効率よくデバックを行うための最大の味方。**

**※不具合の修正に費やす時間は、業務時間のおよそ40％にあたる。**

**※エラーをスラスラ読めるようになるには、エラーの構成要素を把握することが大切。**

①エラーの種類を把握することでエラーの概略を掴むことができる。

②エラーメッセージを読むことで、内容が理解しやすくなる。

③スタックトレース（stack trace）でエラーが発生するまでの処理の流れを知ることができる。バックトレース（back trace）、トレースバック（trace back）などとも呼ばれる。

### スタックトレース（stack trace）の読み方

- スタックトレースは最終地点でエラーが発生しているので、先ずはそこから読んでいくのが効率的。

### スタックトレースの表示内容

- 例）`sample.html:19:21`
    - sample.htmlは「ファイル名」
    - 19:21は「行番号と列番号」
- 列番号は……
    - 行頭から数えること。
    - スペースも1文字として数える。

※スタックトレースはエラーが発生した最終地点から読むのが効率的。全ての行を読もうとせずに、先ずは最終地点の1行を読めば良い。

※スタックトレースの向きは言語によって違う。JavaScriptは下から上へ。Pythonは上から下へ。

### エラーの種類を知ろう

- エラーの種類を把握しておくと、エラーの概要をすぐに掴むことができ、どのようなミスをしていて、どのように修正すればよいか予測を立てやすくなる。
- 大切なことは、「**エラーにはいくつかの種類がある**」と認識すること。そして「**エラーの種類を踏まえてエラーメッセージを読んでみる**」こと。以上のことを意識してエラーを読んでいけば、エラーを理解しやすくなり、自然と知識も身についていく。

**本節で紹介するJavaScriptのエラーの種類**

- SyntaxError：構文エラー
    - コードの文法が間違っている場合に発生
- ReferenceError：参照エラー
    - 存在しない変数や関数を参照しようとした場合に発生
- TypeError：型エラー
    - 値を不適切な方法で扱った場合に発生
- RangeError：範囲エラー
    - 許容されない範囲の値を関数に渡そうとした場合に発生

**エラーの種類1　SyntaxError**

- Syntaxは「構文」という意味で、SyntaxErrorは構文の間違いによるエラーを指す。
- SyntaxErrorが発生するコード
    
    ```jsx
    finction add[a, b] {   /* エラーの原因箇所 */
    	return a + b
    }
    
    /* SyntaxErrorの例 */
    SyntaxError: Unexpected token '['   /* 訳　構文エラー：予期していないトークン'[' */
    ```
    
- トークン：プログラムにおける最小の単位の文字列や記号のこと。
- **書き方の誤りを見つけることに注力すること。**

**エラーの種類2　ReferenceError**

- Referenceは「参照」という意味で、存在しない変数を使おうとすると、それは参照するデータが存在しないことになるため、参照エラーとしてReferenceErrorが発生する。
- ReferenceErrorが発生するコード①
    
    ```jsx
    let message = "楽しいデバッグ";
    
    function showMessage() {
    	console.log(mesage);   /* エラーの原因箇所 */
    }
    showMessage();
    
    /* ReferenceErrorの例① */
    ReferenceError: mesage is not difined   /* 訳　参照エラー：mesageは定義されていません */
    ```
    
- ReferenceErrorが発生するコード②
    
    ```jsx
    if (true) {
    		const message = "楽しいデバッグ";
    }
    function showMessage() {
    		console.log(message);   /* エラーの原因箇所 */
    }
    showMessage()
    
    /* referenceErrorの例② */
    ReferenceError: message is not defined   /* 訳　参照エラー：messageは定義されていません */
    ```
    

**エラーの種類3　TypeError**

- TypeError（型エラー）は、プログラム中の値を不適切な方法で扱った場合に発生するエラー。例えば、JavaScriptにおいて文字列の長さを調べるには、lengthプロパティを使うのに、
